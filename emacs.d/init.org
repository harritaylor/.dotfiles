#+TITLE: Emacs configuration file
#+AUTHOR: harritaylor
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

Based off the wonderful [[https://bitbucket.org/mituharu/emacs-mac/src/master/README-mac][Emacs Mac Port]], these are my dotfiles.
Keep in mind: shift and pinch set full screen / not fullscreen, pinch sets font size, and side swiping switches between buffers.

* Meta
** Startup timer / Garbage collection
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC

Lexical scoping for the init-file is needed, it can be specified in the header. Make startup faster by reducing the frequency of garbage collection.  The default is 800 kilobytes.  Measured in bytes. These are the first lines of the actual configuration.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
(setq gc-cons-threshold (* 50 1000 1000))
#+END_SRC


This helps get rid of =functions might not be defined at runtime= warnings. See https://github.com/jwiegley/use-package/issues/590

#+BEGIN_SRC emacs-lisp
;; (eval-when-compile
;;   (setq use-package-expand-minimally byte-compile-current-file))
#+END_SRC
** Use package

Initialize package and add Melpa source.
#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                 (not (gnutls-available-p))))
    (proto (if no-ssl "http" "https")))

    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)

    (when (< emacs-major-version 24)
     ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)
#+END_SRC

Install use-package.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))
(setq use-package-always-ensure t)

;; this package is useful for overriding major mode keybindings
(use-package bind-key)
#+END_SRC
** Modifier keys

Emacs control is Ctrl. Emacs Super is Command. Emacs Meta is Alt. Right Alt (option) can be used to enter symbols like em dashes =â€”=.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq mac-right-command-modifier 'super)
(setq mac-command-modifier 'super)

(setq mac-option-modifier 'meta)
(setq mac-left-option-modifier 'meta)
(setq mac-right-option-modifier 'meta)

(setq mac-right-option-modifier 'nil)
#+END_SRC
** After save hook

Tangle and compile this file on save automatically:
#+begin_src emacs-lisp :tangle yes
(defun my/tangle-init ()
  "If the current file is in '~/.dotfiles', the code blocks are tangled"
  (when (equal buffer-file-name (file-truename (concat user-emacs-directory "init.org")))
    ;; load tangled init.el file and byte-compile it
    (org-babel-tangle)
    (load-file (concat user-emacs-directory "init.el"))
    (byte-compile-file (concat user-emacs-directory "init.el"))
    (message "compiled %s" buffer-file-name)))
(add-hook 'after-save-hook #'my/tangle-init)
#+end_src
* Sane defaults
** Evil Mode
It all starts here

https://github.com/noctuid/evil-guide
#+begin_src emacs-lisp :tangle yes
(use-package evil
  :preface
  (setq evil-want-visual-char-semi-exclusive t
        evil-ex-search-vim-style-regexp t
        evil-ex-substitute-global t
        evil-ex-visual-char-range t
        ;; evil-mode-line-format 'nil
        evil-symbol-word-search t
        evil-default-state 'emacs
        evil-ex-interactive-search-highlight 'selected-window
        evil-toggle-key "s-\\"

        ;; cursor
        evil-default-cursor '("Plum" box)
        evil-normal-state-cursor '("SpringGreen" box)
        evil-emacs-state-cursor '("Plum" box)
        evil-insert-state-cursor '("SpringGreen" bar)
        evil-visual-state-cursor '("NavajoWhite" hollow)

        ;; modeline
        evil-normal-state-tag (propertize " NORMAL " 'face '(:background "SpringGreen"))
        evil-emacs-state-tag (propertize " EMACS  " 'face '(:background "Plum"))
        evil-insert-state-tag (propertize "-INSERT-" 'face '(:background "SpringGreen"))
        evil-replace-state-tag  (propertize " REPLACE " 'face '(:background "SpringGreen"))
        evil-motion-state-tag   (propertize "  MOTION " 'face '(:background "SpringGreen"))
        evil-visual-state-tag   (propertize " VISUAL " 'face '(:background "NavajoWhite"))
        evil-operator-state-tag (propertize " OPERATE " 'face '(:background "SpringGreen")))

  :config
  (evil-select-search-module 'evil-search-module 'evil-search)
  (global-unset-key (kbd "C-u"))
  (global-set-key (kbd "C-u") 'evil-scroll-page-up)

  ;; (global-set-key (kbd "s--") 'evil-toggle-key)
  ;; Enter a mode given a state
  ;; http://wikemacs.org/wiki/Evil#Enter_an_emacs_mode_in_a_given_state
  (loop for (mode . state) in '(
                                (dired-mode . normal)
                                (emacs-lisp-mode . normal)
                                (org-mode . emacs))
        do (evil-set-initial-state mode state))

  ;; stop copying each visual state move to the clipboard
  ;; https://bitbucket.org/lyro/evil/issue/336/osx-visual-state-copies-the-region-on
  (advice-add #'evil-visual-update-x-selection :override #'ignore)

  ;; Start help-with-tutorial in emacs state
  (advice-add #'help-with-tutorial :after (lambda (&rest _) (evil-emacs-state +1)))

  ;; Allows you to click buttons without initiating a selection
  (define-key evil-motion-state-map [down-mouse-1] nil)

  ;; TODO: https://github.com/hlissner/doom-emacs/blob/c2a0ac8b3e69fc362d222f108ddd3a01e46f1574/modules/editor/evil/config.el#L150
  ;; (advice-add #'evil-force-normal-state :after #'escape) ;; this aint right...

  ;; TODO: evil-easymotion
  ;; https://github.com/hlissner/doom-emacs/blob/c2a0ac8b3e69fc362d222f108ddd3a01e46f1574/modules/editor/evil/config.el#L216

  ;; TODO: evil-embrace
  ;; https://github.com/hlissner/doom-emacs/blob/c2a0ac8b3e69fc362d222f108ddd3a01e46f1574/modules/editor/evil/config.el#L231

  ;; TODO: evil-escape
  ;; https://github.com/hlissner/doom-emacs/blob/c2a0ac8b3e69fc362d222f108ddd3a01e46f1574/modules/editor/evil/config.el#L277

  :init
  (evil-mode 1))
#+end_src

#+RESULTS:
: t

Evil leader shortcuts etc
#+begin_src emacs-lisp :tangle yes
;; (use-package evil-leader
;;   :preface
;;   (evil-leader/set-leader "SPC")
;;   (evil-leader/set-key
;;     "b" 'ibuffer
;;     "k" 'kill-buffer))
#+end_src

** Basics

Exec path from shell. TODO: not sure if useful?
#+begin_src emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :init
  (exec-path-from-shell-copy-env "PATH")
  (setq exec-path-from-shell-arguments '("-i")))
#+end_src

y-or-n-p is useful, but annoying sometimes
#+begin_src emacs-lisp :tangle yes
;; (defun y-or-n-p-with-return (orig-func &rest args)
;;   (let ((query-replace-map (copy-keymap query-replace-map)))
;;     (define-key query-replace-map (kbd "RET") 'act)
;;     (apply orig-func args)))

;; (advice-add 'y-or-n-p :around #'y-or-n-p-with-return)
#+end_src

#+RESULTS:
: y-or-n-p-with-return

Session saving
#+begin_src emacs-lisp :tangle yes
;; use only one desktop
(setq desktop-path '("~/.emacs.d/"))
(setq desktop-dirname "~/.emacs.d/")
(setq desktop-base-file-name "emacs-desktop")
(setq desktop-load-locked-desktop t)

;; remove desktop after it's been read
(add-hook 'desktop-after-read-hook
          '(lambda ()
             ;; desktop-remove clears desktop-dirname
             (setq desktop-dirname-tmp desktop-dirname)
             (desktop-remove)
             (setq desktop-dirname desktop-dirname-tmp)))

(defun saved-session ()
  (file-exists-p (concat desktop-dirname "/" desktop-base-file-name)))

;; use session-restore to restore the desktop manually
(defun session-restore ()
  "Restore a saved emacs session."
  (interactive)
  (if (saved-session)
      (desktop-read)
    (message "No session found.")))

;; use session-save to save the desktop manually
(defun session-save ()
  "Save an emacs session."
  (interactive)
  (if (saved-session)
      (if (y-or-n-p "Overwrite existing session? ")
          (desktop-save-in-desktop-dir)
        (message "Session not saved."))
    (desktop-save-in-desktop-dir)))

;; ask user whether to restore desktop at start-up
(add-hook 'after-init-hook
          '(lambda ()
             (if (saved-session)
                 (if (y-or-n-p "Restore session? ")
                     (session-restore)))))

(add-hook 'kill-emacs-hook
          '(lambda ()
             (if (y-or-n-p "Save session? ")
                 (session-save) (desktop-remove))))
#+end_src

Autosave and backup are not useful.
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
(setq create-lockfiles nil)  ; stop creating .# files
#+END_SRC

Warn only when opening files bigger than 100MB
#+begin_src emacs-lisp :tangle yes
(setq large-file-warning-threshold 100000000)
#+end_src

Revert (update) buffers automatically when underlying files are changed externally.
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Basic things.
#+BEGIN_SRC emacs-lisp
(setq
 inhibit-startup-message t         ; Don't show the startup message
 inhibit-startup-screen t          ; or screen
 cursor-in-non-selected-windows t  ; Hide the cursor in inactive windows
 echo-keystrokes 0.1               ; Show keystrokes right away, don't show the message in the scratch buffer
 initial-scratch-message nil       ; Empty scratch buffer
 initial-major-mode 'fundamental-mode
 sentence-end-double-space nil     ; Sentences should end in one space, come on!
 ;; confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
)
(setq-default delete-by-moving-to-trash t)

(fset 'yes-or-no-p 'y-or-n-p)      ; y and n instead of yes and no everywhere else
(scroll-bar-mode -1)
(delete-selection-mode 1)
(global-unset-key (kbd "s-p"))
(global-unset-key (kbd "<ctrl>-<tab>"))
#+END_SRC

#+RESULTS:

Emacs kill ring and system clipboard should be independent.
#+BEGIN_SRC emacs-lisp
(use-package simpleclip
  :init
  (simpleclip-mode 1))
#+END_SRC

Quickly switch to scratch buffer with =Cmd+0=.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-0") (lambda ()
                              (interactive)
                              (if (string= (buffer-name) "*scratch*") (previous-buffer) (switch-to-buffer "*scratch*"))))
#+END_SRC
** Which key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))
#+END_SRC
* Visuals
** Aesthetics

Focus colour. Use C-x C-e on (list-colors-display) to get a choice!
#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'mode-line nil :background "Plum")
(set-face-attribute 'mode-line-inactive nil :background "Snow" :foreground "Black")
#+end_src

Show full path in title bar & set initial frame size
#+BEGIN_SRC emacs-lisp
(setq-default line-spacing 0)
;; (setq initial-frame-alist '((width . 135) (height . 55)))
(tool-bar-mode -1)
(setq-default frame-title-format "%b â€” Emacs")
#+END_SRC

Simple mode line.
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t) ;; show columns and rows in mode line
#+END_SRC

Font & pretty icons.
#+begin_src emacs-lisp :tangle yes
(when (member "Go Mono" (font-family-list))
  (set-face-attribute 'default nil :font "Go Mono 14"))
(setq-default line-spacing 1)
(use-package all-the-icons)
;; (use-package gruvbox-theme)
;; (load-theme 'gruvbox-dark-soft)
#+end_src

Hide minor modes from modeline
#+begin_src emacs-lisp :tangle yes
(use-package rich-minority
  :config
  (unless rich-minority-mode
    (rich-minority-mode 1))
  (setf rm-blacklist ""))
#+end_src

#+RESULTS:
: t
** Functional

Evil-mode colourings
#+begin_src emacs-lisp :tangle yes
;; (setq evil-default-cursor (quote (t "#750000"))
;;       evil-visual-state-cursor '("green" hollow)
;;       evil-normal-state-cursor '("green" box)

;;       evil-insert-state-cursor '("pink" (bar . 2)))
#+end_src


Matching parenthesis appearance.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
;; (set-face-background 'show-paren-match "wheat")
;; (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
;; (show-paren-mode)
#+END_SRC

Use spaces instead of tabs.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default c-basic-indent 2)
(setq-default c-basic-offset 2)
(setq-default tab-width 2)
(setq tab-width 2)
(setq js-indent-level 2)
(setq css-indent-offset 2)
(setq c-basic-offset 2)
#+END_SRC

Visual lines.
#+BEGIN_SRC emacs-lisp
;; (global-visual-line-mode t)
;; (global-linum-mode t)
;; (setq linum-format "%4d \u2502 ")
#+END_SRC

#+RESULTS:
: %4d â”‚

Vi-tilde fringes
#+begin_src emacs-lisp :tangle yes
(use-package vi-tilde-fringe
  :config
  (global-vi-tilde-fringe-mode 1))
#+end_src
* OS Integration
Pass system shell environment to Emacs. This is important primarily for shell inside Emacs, but also things like Org mode export to Tex PDF don't work, since it relies on running external command =pdflatex=, which is loaded from =PATH=.
#+begin_src emacs-lisp :tangle yes
(use-package direnv
 :config
 (direnv-mode))
#+end_src

Shell stuff
#+begin_src emacs-lisp :tangle yes
(use-package shell-pop
  :config
  (setq shell-pop-shell-type "eshell")
        ;; shell-pop "s--"))
  (global-set-key (kbd "s-\-") 'shell-pop))
#+end_src

#+RESULTS:
: t

Use =Cmd+i= to open the current folder in a new tab of Terminal:
#+BEGIN_SRC emacs-lisp
(defun iterm-goto-filedir-or-home ()
  "Go to present working dir and focus iterm"
  (interactive)
  (do-applescript
   (concat
    " tell application \"iTerm2\"\n"
    "   tell current window\n"
    "     create tab with profile \"Default\"\n"
    "   end tell\n"
    "   tell the current session of current window\n"
    (format "     write text \"cd %s\" \n"
            ;; string escaping madness for applescript
            (replace-regexp-in-string "\\\\" "\\\\\\\\"
                                      (shell-quote-argument (or default-directory "~"))))
    "   end tell\n"
    " end tell\n"
    " do shell script \"open -a iTerm\"\n"
    ))
  )
(global-set-key (kbd "s-i") 'iterm-goto-filedir-or-home)
#+END_SRC

** Navigation and editing

Kill line with =Cmd-Backspace= (thanks to simpleclip, killing doesn't rewrite the system clipboard). Kill one word with =Alt-Backspace=. Also kill forward with =Alt-Shift-Backspace=.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-<backspace>") 'kill-whole-line)
(global-set-key (kbd "s-<delete>") 'kill-whole-line)
(global-set-key (kbd "M-S-<backspace>") 'kill-word)
(global-set-key (kbd "M-<delete>") 'kill-word)
(bind-key* "S-<delete>" 'kill-word)
#+END_SRC

Use =cmd= for movement and selection just like in macOS.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-<right>") 'end-of-visual-line)
(global-set-key (kbd "s-<left>") 'beginning-of-visual-line)

(global-set-key (kbd "s-<up>") 'beginning-of-buffer)
(global-set-key (kbd "s-<down>") 'end-of-buffer)
#+END_SRC

   macOS basics.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-a") 'mark-whole-buffer)       ;; select all
(global-set-key (kbd "s-s") 'save-buffer)             ;; save
(global-set-key (kbd "s-S") 'write-file)              ;; save as
(global-set-key (kbd "s-q") 'save-buffers-kill-emacs) ;; quit
#+END_SRC

Smarter beginning-of-visual-line
#+begin_src emacs-lisp :tangle yes
;; Thanks to Bozhidar Batsov
;; http://emacsredux.com/blog/2013/]05/22/smarter-navigation-to-the-beginning-of-a-line/
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.
If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)
(global-set-key (kbd "s-<left>") 'smarter-move-beginning-of-line)
#+end_src

Regular people undo-redo.
#+BEGIN_SRC emacs-lisp
;; (use-package undo-fu)
(global-unset-key (kbd "C-z"))
;; (global-set-key (kbd "s-z")   'undo-fu-only-undo)
;; (global-set-key (kbd "s-r")   'undo-fu-only-redo)

(use-package undo-tree
  :diminish undo-tree-mode
  :init
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/tmp/undo"))
          undo-tree-auto-save-history t
          undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t)))

(global-set-key (kbd "s-z") 'undo-tree-undo)
(global-set-key (kbd "s-Z") 'undo-tree-redo)
#+END_SRC


Move between open buffers with ease.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-{") 'previous-buffer)
(global-set-key (kbd "s-}") 'next-buffer)
#+END_SRC

MacOS-esque window management shortcuts.
Terminal: CMD-D for splitting, Safari: CMD-W for close tabs
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-w") (kbd "C-x 0"))
(global-set-key (kbd "M-s-w") (kbd "C-x 1"))

(global-set-key (kbd "s-d") (kbd "C-x 2"))
(global-set-key (kbd "s-D") (kbd "C-x 3"))

(global-set-key (kbd "s-K") 'kill-this-buffer)
;; (global-set-key (kbd "C-s-f") 'maximize-window)
#+END_SRC

Go to other windows easily with one keystroke =s-something= instead of =C-x something=.
=Move-text= allows moving lines around with meta-up/down.

#+BEGIN_SRC emacs-lisp
;; (eval-after-load "org"
  ;; '(progn (setq org-metaup-hook nil)
   ;; (setq org-metadown-hook nil)))

;; (use-package move-text
  ;; :config
  ;; (move-text-default-bindings))
#+END_SRC

Smarter open-line: Hit =cmd+return= to insert a new line below the current.

#+BEGIN_SRC emacs-lisp
(defun smart-open-line ()
  "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun smart-open-line-above ()
  "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "s-<return>") 'smart-open-line)
(global-set-key (kbd "s-S-<return>") 'smart-open-line-above)
#+END_SRC

Join lines.
#+BEGIN_SRC emacs-lisp
(defun smart-join-line (beg end)
  "If in a region, join all the lines in it. If not, join the current line with the next line."
  (interactive "r")
  (if mark-active
      (join-region beg end)
      (top-join-line)))

(defun top-join-line ()
  "Join the current line with the next line."
  (interactive)
  (delete-indentation 1))

(defun join-region (beg end)
  "Join all the lines in the region."
  (interactive "r")
  (if mark-active
      (let ((beg (region-beginning))
            (end (copy-marker (region-end))))
        (goto-char beg)
        (while (< (point) end)
          (join-line 1)))))

(global-set-key (kbd "s-j") 'smart-join-line)
#+END_SRC

Delete trailing spaces and add new line in the end of a file on save.
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)
#+END_SRC

Multiple cursors are a must. Make =<return>= insert a newline; =multiple-cursors-mode= can still be disabled with =C-g=.
#+BEGIN_SRC emacs-lisp
;; (use-package multiple-cursors
;;   :config
;;   (setq mc/always-run-for-all 1)
;;   (global-unset-key (kbd "C-g"))
;;   (global-set-key (kbd "C-g") 'mc/mark-next-like-this)
;;   (global-set-key (kbd "C-S-g") 'mc/unmark-previous-like-this)
;;   (global-set-key (kbd "C-s-g") 'mc/mark-all-dwim)
;;   (define-key mc/keymap (kbd "<return>") nil)
;;   (define-key mc/keyboard-quit (kbd "<esc>") nil)
;;   (global-set-key (kbd "s-<mouse-1>") 'mc/add-cursor-on-click))
#+END_SRC

#+RESULTS:
: t

Comment lines.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-/") 'comment-line)
#+END_SRC

ESC as the universal "get me out of here" command.
#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+END_SRC
** Windows

MacOS Behavious
#+begin_src emacs-lisp :tangle yes
(defun delete-frame-or-kill-emacs ()
  "Delete the selected frame.  If the last one, kill Emacs."
  (interactive)
  (condition-case nil (delete-frame) (error (kill-emacs))))

(global-set-key [remap delete-frame] 'delete-frame-or-kill-emacs)
#+end_src

#+RESULTS:
: delete-frame-or-kill-emacs

Automatic new windows are always on the bottom, not the side.
#+BEGIN_SRC emacs-lisp
(setq split-height-threshold 0)
(setq split-width-threshold nil)
#+END_SRC

Move between windows with alt-tab and shift-alt-tab
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-<tab>") 'other-window)
(global-set-key (kbd "M-S-<tab>") 'previous-multiframe-window)
#+END_SRC

Shackle to make sure all windows are nicely positioned.
#+BEGIN_SRC emacs-lisp
(use-package shackle
  :init
  (setq shackle-default-alignment 'below
        shackle-default-size 0.4
        shackle-rules '((help-mode           :align below :select t)
                        (helpful-mode        :align below)
                        (compilation-mode    :select t   :size 0.25)
                        ("*compilation*"     :select nil :size 0.25)
                        ("*ag search*"       :select nil :size 0.25)
                        ("*Flycheck errors*" :select nil :size 0.25)
                        ("*Warnings*"        :select nil :size 0.25)
                        ("*Error*"           :select nil :size 0.25)
                        ("*Org Links*"       :select nil :size 0.1)
                        (magit-status-mode                :align bottom :size 0.5  :inhibit-window-quit t)
                        (magit-log-mode                   :same t                  :inhibit-window-quit t)
                        (magit-commit-mode                :ignore t)
                        (magit-diff-mode     :select nil  :align left   :size 0.5)
                        (git-commit-mode                  :same t)
                        (vc-annotate-mode                 :same t)
                        ))
  :config
  (shackle-mode 1))
#+END_SRC
* Ivy, Swiper and Counsel

Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :config
  (global-set-key (kbd "s-f") 'swiper-isearch))
#+END_SRC

Ivy
#+BEGIN_SRC emacs-lisp

(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
      '((swiper . ivy--regex-plus)
        (swiper-isearch . regexp-quote)
        ;; (counsel-git . ivy--regex-plus)
        ;; (counsel-ag . ivy--regex-plus)
        (counsel-rg . ivy--regex-plus)
        (t      . ivy--regex-fuzzy)))   ;; enable fuzzy searching everywhere except for Swiper and ag

  (global-set-key (kbd "s-b") 'ivy-switch-buffer)
  ;; (global-set-key (kbd "s-F") 'ivy-resume)
)


(use-package ivy-rich
  :config
  (ivy-rich-mode 1)
  (setq ivy-rich-path-style 'abbrev))

#+END_SRC

Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "s-y") 'counsel-yank-pop)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "s-o") 'counsel-find-file)
  (global-set-key (kbd "M-<space>") 'counsel-rg)
  (global-set-key (kbd "s-p") 'counsel-git))

;; When using git ls (via counsel-git), include unstaged files
(setq counsel-git-cmd "git ls-files -z --full-name --exclude-standard --others --cached --")

(use-package smex) ;; show rexent commands when invoking alt-x
(use-package flx) ;; fuzzy matching


#+END_SRC
* Git

Magit time
#+BEGIN_SRC emacs-lisp

(use-package magit
  :config
  (global-set-key (kbd "s-g") 'magit-status)
  (global-set-key (kbd "s-t") 'magit-todos-list))

(use-package magit-todos
  :commands (magit-todos-mode)
  :config
  (setq magit-todos-recursive t))

(use-package hl-todo
  :config
  (setq hl-todo-keyword-faces
        '(("TODO"   . "#FF0000")
          ("FIXME"  . "#FF0000")
          ("DEBUG"  . "#A020F0")
          ("GOTCHA" . "#FF4500")
          ("STUB"   . "#1E90FF")))
  (add-hook 'prog-mode-hook 'hl-todo-mode))

#+END_SRC

#+RESULTS:
: t

Navigate to projects with =Cmd+Shift+P=
#+BEGIN_SRC emacs-lisp

(setq magit-repository-directories '(("\~/Projects/" . 4)))

(defun magit-status-with-prefix-arg ()
  "Call `magit-status` with a prefix."
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively #'magit-status)))

(global-set-key (kbd "s-P") 'magit-status-with-prefix-arg)

#+END_SRC

#+RESULTS:
: magit-status-with-prefix-arg

#+begin_src emacs-lisp :tangle yes

(use-package git-gutter
  :config
  (global-git-gutter-mode 't)
  (set-face-background 'git-gutter:modified 'nil) ;; background color
  (set-face-foreground 'git-gutter:added "green4")
  (set-face-foreground 'git-gutter:deleted "red"))

#+end_src

#+RESULTS:
: t
* Spell checking
Spell checking requires an external command to be available. Install aspell on your Mac, then make it the default checker for Emacsâ€™ ispell. Note that personal dictionary is located at ~/.aspell.LANG.pws by default.
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
(defvar ispell-dictionary "en_GB")
#+END_SRC

Popup window for spellchecking
#+begin_src emacs-lisp :tangle yes
(use-package flyspell-correct)
(use-package flyspell-correct-popup)
#+end_src

Enable spellcheck for all text modes. TODO: disable on start.
#+BEGIN_SRC emacs-lisp

;; (add-hook 'text-mode-hook 'flyspell-mode)
;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

Enable right mouse click on macOS to see the list of suggestions.
#+begin_src emacs-lisp :tangle yes
(eval-after-load "flyspell"
  '(progn
     (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
     (define-key flyspell-mouse-map [mouse-3] #'undefined)))
#+end_src

Synonym search is =Cmd+Shift+\=. It requires =wordnet=.
#+BEGIN_SRC emacs-lisp
(use-package powerthesaurus
  :config
  (global-set-key (kbd "s-|") 'powerthesaurus-lookup-word-dwim)
  )
#+END_SRC

Word definition search.
#+BEGIN_SRC emacs-lisp
(use-package define-word
  :config
  (global-set-key (kbd "M-\\") 'define-word-at-point))
#+END_SRC
* Programming
** Formatting
Format everything
#+begin_src emacs-lisp :tangle yes
(use-package format-all
  :config
  (add-hook 'prog-mode-hook 'format-all-mode)
  (global-set-key (kbd "M-s-l") 'format-all-buffer))
#+end_src
** Completions
#+begin_src emacs-lisp :tangle yes
(use-package company
  :config
  (setq company-idle-delay 0.1)
  (setq company-global-modes '(not org-mode))
  (setq company-minimum-prefix-length 1)
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src
** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets"))
    (yas-global-mode 1))
#+END_SRC
** Language server protocol
M-x Eglot
Check this out: https://github.com/joaotavora/eglot#per-project-server-configuration
#+begin_src emacs-lisp :tangle yes
(use-package eglot
  :config
  ;; (add-to-list 'eglot-server-programs '(python-mode . ("python-langauge-server" "--args")))
  (add-hook 'python-mode-hook 'eglot-ensure)
  (define-key eglot-mode-map (kbd "C-c h") 'eglot-help-at-point)
  (define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions))
#+end_src
** Python

Try again...

Conda mode
#+begin_src emacs-lisp :tangle yes
(use-package conda
  :preface
  (setq conda-anaconda-home "~/.conda/")
  :init
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
  (conda-env-autoactivate-mode t))
#+end_src


PyEnv mode. Allows for activating arbitrary venvs.
#+begin_src emacs-lisp :tangle yes
;; (use-package pyenv-mode)
;; (use-package anaconda-mode)
;; (use-package elpy
;;   :preface
;;   (setq python-shell-interpreter "ipython"
;;         python-shell-interpreter-args "-i --simple-prompt")
;;   :config
;;   (add-hook 'python-mode-hook 'anaconda-mode)
;;   (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
;;   (add-hook 'python-mode-hook 'elpy-enable))
#+end_src
* Writing
** Org

Visually indent sections, which looks better for smaller files etc.
#+begin_src emacs-lisp :tangle yes
(setq org-startup-indented t)
(setq org-catch-invisible-edits 'error)
(setq org-cycle-separator-lines -1)
(setq calendar-week-start-day 1)
(setq org-ellipsis "â¤µ")
;; (setq org-support-shift-select t)

(use-package org-download
  :config
  ;; add support to dired
  (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src

org files
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/org")
(setq org-agenda-files '("~/org"))

(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+end_src

Code block indentation should be correct depending on language, including code highlighting.
#+begin_src emacs-lisp :tangle yes
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)
#+end_src

Export to HTML
#+begin_src emacs-lisp :tangle yes
(use-package htmlize)
#+end_src

#+RESULTS:

Etc from https://github.com/freetonik/emacs-dotfiles/blob/master/init.org
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'org
    ;; no shift or alt with arrows
    ;; (define-key org-mode-map (kbd "<S-left>") nil)
    ;; (define-key org-mode-map (kbd "<S-right>") nil)
    ;; (define-key org-mode-map (kbd "<M-left>") nil)
    ;; (define-key org-mode-map (kbd "<M-right>") nil)
    ;; ;; no shift-alt with arrows
    ;; (define-key org-mode-map (kbd "<M-S-left>") nil)
    ;; (define-key org-mode-map (kbd "<M-S-right>") nil)

    ;; (define-key org-mode-map (kbd "C-s-<left>") 'org-metaleft)
    ;; (define-key org-mode-map (kbd "C-s-<right>") 'org-metaright))

  ;; (setq org-use-speed-commands t)

  ;; (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-s-<down>") 'org-narrow-to-subtree)
    (define-key org-mode-map (kbd "C-s-<up>") 'widen))
#+end_src

Agenda and capture
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "s-=") 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
#+end_src

#+RESULTS:
: org-agenda
*** Latex
#+begin_src emacs-lisp :tangle yes

(require 'ox-latex)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
(setq org-highlight-latex-and-related '(latex))
(setq org-preview-latex-default-process 'dvipng)
(org-babel-do-load-languages 'org-babel-load-languages '((latex . t)))
(with-eval-after-load 'ox-latex
  (add-to-list
   'org-latex-classes
   '("tufte-book"

     "\\documentclass{tufte-book}
     \\input{/users/rakhim/.emacs.d/latex/tufte.tex}"
     ("\\part{%s}" . "\\part*{%s}")
     ("\\chapter{%s}" . "\\chapter*{%s}")
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

#+end_src

#+begin_src emacs-lisp :tangle yes

#+end_src
*** Pandoc
#+begin_src emacs-lisp :tangle yes

(use-package pandoc-mode)

(add-hook 'markdown-mode-hook 'pandoc-mode)
(add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)

#+end_src

#+RESULTS:
** LaTeX
Install AucTeX
#+begin_src emacs-lisp :tangle yes :results none
(use-package tex
  :defer t
  :ensure auctex
  :config
  (setq TeX-auto-save t))
#+end_src

Settings
#+begin_src emacs-lisp :tangle yes :results none
(setq TeX-PDF-mode t)
(setq TeX-view-program-selection '((output-pdf "Skim"))
      TeX-source-correlate-start-server t)
#+end_src


* Frames, windows, buffers
Always open in the same frame
#+begin_src emacs-lisp :tangle yes
  (setq ns-pop-up-frames nil)
#+end_src
* Customisation

Store custom-file separately, don't freak out when it's not found.

#+begin_src emacs-lisp :tangle yes

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

#+end_src

Open config file by pressing C-x and then C
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-x c") (lambda () (interactive) (find-file "~/.emacs.d/init.org")))
#+end_src
