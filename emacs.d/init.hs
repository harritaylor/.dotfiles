Pandoc (Meta {unMeta = fromList [("author",MetaList [MetaInlines [Str "harritaylor"]]),("babel",MetaString ":cache yes"),("property",MetaString "header-args :tangle yes"),("startup",MetaString "overview"),("title",MetaInlines [Str "Emacs",Space,Str "configuration",Space,Str "file"])]})
[Header 1 ("meta-etc",[],[]) [Str "Meta",Space,Str "/",Space,Str "ETC"]
,Header 2 ("startup-timer",[],[]) [Str "Startup",Space,Str "timer"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(add-hook 'emacs-startup-hook\n          (lambda ()\n            (message \"Emacs ready in %s with %d garbage collections.\"\n                     (format \"%.2f seconds\"\n                             (float-time\n                              (time-subtract after-init-time before-init-time)))\n                     gcs-done)))\n"
,Header 2 ("gc",[],[]) [Str "GC"]
,Para [Str "Lexical",Space,Str "scoping",Space,Str "for",Space,Str "the",Space,Str "init-file",Space,Str "is",Space,Str "needed,",Space,Str "it",Space,Str "can",Space,Str "be",Space,Str "specified",Space,Str "in",Space,Str "the",Space,Str "header.",Space,Str "Make",Space,Str "startup",Space,Str "faster",Space,Str "by",Space,Str "reducing",Space,Str "the",Space,Str "frequency",Space,Str "of",Space,Str "garbage",Space,Str "collection.",Space,Str "The",Space,Str "default",Space,Str "is",Space,Str "800",Space,Str "kilobytes.",Space,Str "Measured",Space,Str "in",Space,Str "bytes.",Space,Str "These",Space,Str "are",Space,Str "the",Space,Str "first",Space,Str "lines",Space,Str "of",Space,Str "the",Space,Str "actual",Space,Str "configuration."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) ";;; -*- lexical-binding: t -*-\n(setq gc-cons-threshold (* 50 1000 1000))\n"
,Para [Str "Tangle",Space,Str "and",Space,Str "compile",Space,Str "this",Space,Str "file",Space,Str "on",Space,Str "save",Space,Str "automatically:"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(defun tangle-init ()\n  \"If the current buffer is 'init.org' the code-blocks are\ntangled, and the tangled file is compiled.\"\n  (when (equal (buffer-file-name)\n               (expand-file-name (concat user-emacs-directory \"init.org\")))\n    ;; Avoid running hooks when tangling.\n    (let ((prog-mode-hook nil))\n      (org-babel-tangle)\n      (byte-compile-file (concat user-emacs-directory \"init.el\")))))\n\n(add-hook 'after-save-hook 'tangle-init)\n"
,Para [Str "This",Space,Str "helps",Space,Str "get",Space,Str "rid",Space,Str "of",Space,Code ("",[],[]) "functions might not be defined at runtime",Space,Str "warnings.",Space,Str "See",Space,Link ("",[],[]) [Str "https://github.com/jwiegley/use-package/issues/590"] ("https://github.com/jwiegley/use-package/issues/590","")]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) ";; (eval-when-compile\n;;   (setq use-package-expand-minimally byte-compile-current-file))\n"
,Header 2 ("use-package",[],[]) [Str "Use",Space,Str "package"]
,Para [Str "Initialize",Space,Str "package",Space,Str "and",Space,Str "add",Space,Str "Melpa",Space,Str "source."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(require 'package)\n(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))\n                 (not (gnutls-available-p))))\n    (proto (if no-ssl \"http\" \"https\")))\n\n    (add-to-list 'package-archives (cons \"melpa\" (concat proto \"://melpa.org/packages/\")) t)\n    ;;(add-to-list 'package-archives (cons \"melpa-stable\" (concat proto \"://stable.melpa.org/packages/\")) t)\n\n    (when (< emacs-major-version 24)\n     ;; For important compatibility libraries like cl-lib\n      (add-to-list 'package-archives '(\"gnu\" . (concat proto \"://elpa.gnu.org/packages/\")))))\n(package-initialize)\n"
,Para [Str "Install",Space,Str "use-package."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(unless (package-installed-p 'use-package)\n  (package-refresh-contents)\n  (package-install 'use-package))\n\n(eval-when-compile (require 'use-package))\n(setq use-package-always-ensure t)\n\n;; this package is useful for overriding major mode keybindings\n(use-package bind-key)\n"
,Header 2 ("modifier-keys",[],[]) [Str "Modifier",Space,Str "keys"]
,Para [Str "Emacs",Space,Str "control",Space,Str "is",Space,Str "Ctrl.",Space,Str "Emacs",Space,Str "Super",Space,Str "is",Space,Str "Command.",Space,Str "Emacs",Space,Str "Meta",Space,Str "is",Space,Str "Alt.",Space,Str "Right",Space,Str "Alt",Space,Str "(option)",Space,Str "can",Space,Str "be",Space,Str "used",Space,Str "to",Space,Str "enter",Space,Str "symbols",Space,Str "like",Space,Str "em",Space,Str "dashes",Space,Code ("",[],[]) "\8212",Str "."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq mac-right-command-modifier 'super)\n(setq mac-command-modifier 'super)\n\n(setq mac-option-modifier 'meta)\n(setq mac-left-option-modifier 'meta)\n(setq mac-right-option-modifier 'meta)\n\n(setq mac-right-option-modifier 'nil)\n"
,Header 1 ("visuals",[],[]) [Str "Visuals"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq-default line-spacing 0)\n\n(setq initial-frame-alist '((width . 135) (height . 55)))\n(tool-bar-mode -1)\n"
,Para [Str "Matching",Space,Str "parenthesis",Space,Str "appearance."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(set-face-background 'show-paren-match \"wheat\")\n(set-face-attribute 'show-paren-match nil :weight 'extra-bold)\n(show-paren-mode)\n"
,Para [Str "Simple",Space,Str "mode",Space,Str "line."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq column-number-mode t) ;; show columns and rows in mode line\n"
,Para [Str "Show",Space,Str "full",Space,Str "path",Space,Str "in",Space,Str "title",Space,Str "bar."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq-default frame-title-format \"%b (%f)\")\n"
,Para [Str "Use",Space,Str "spaces",Space,Str "instead",Space,Str "of",Space,Str "tabs."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq-default indent-tabs-mode nil)\n(setq-default c-basic-indent 2)\n(setq-default c-basic-offset 2)\n(setq-default tab-width 2)\n(setq tab-width 2)\n(setq js-indent-level 2)\n(setq css-indent-offset 2)\n(setq c-basic-offset 2)\n"
,Para [Str "Visual",Space,Str "lines."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-visual-line-mode t)\n"
,Header 1 ("sane-defaults",[],[]) [Str "Sane",Space,Str "defaults"]
,Header 2 ("basics",[],[]) [Str "Basics"]
,Para [Str "Autosave",Space,Str "and",Space,Str "backup",Space,Str "are",Space,Str "not",Space,Str "useful."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq make-backup-files nil) ; stop creating backup~ files\n(setq auto-save-default nil) ; stop creating #autosave# files\n(setq create-lockfiles nil)  ; stop creating .# files\n"
,Para [Str "Revert",Space,Str "(update)",Space,Str "buffers",Space,Str "automatically",Space,Str "when",Space,Str "underlying",Space,Str "files",Space,Str "are",Space,Str "changed",Space,Str "externally."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-auto-revert-mode t)\n"
,Para [Str "Basic",Space,Str "things."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n\n(setq\n inhibit-startup-message t         ; Don't show the startup message\n inhibit-startup-screen t          ; or screen\n cursor-in-non-selected-windows t  ; Hide the cursor in inactive windows\n\n echo-keystrokes 0.1               ; Show keystrokes right away, don't show the message in the scratch buffer\n initial-scratch-message nil       ; Empty scratch buffer\n sentence-end-double-space nil     ; Sentences should end in one space, come on!\n ;; confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting\n)\n\n(fset 'yes-or-no-p 'y-or-n-p)      ; y and n instead of yes and no everywhere else\n(scroll-bar-mode -1)\n(delete-selection-mode 1)\n(global-unset-key (kbd \"s-p\"))\n"
,Para [Str "Emacs",Space,Str "kill",Space,Str "ring",Space,Str "and",Space,Str "system",Space,Str "clipboard",Space,Str "should",Space,Str "be",Space,Str "independant."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package simpleclip\n  :init\n  (simpleclip-mode 1))\n"
,Para [Str "Quickly",Space,Str "switch",Space,Str "to",Space,Str "scratch",Space,Str "buffer",Space,Str "with",Space,Code ("",[],[]) "\8984+0",Str "."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-set-key (kbd \"s-0\") (lambda ()\n                              (interactive)\n                              (if (string= (buffer-name) \"*scratch*\") (previous-buffer) (switch-to-buffer \"*scratch*\"))))\n"
,Header 2 ("which-key",[],[]) [Str "Which",Space,Str "key"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package which-key\n  :config\n  (which-key-mode)\n  (setq which-key-idle-delay 0.5))\n"
,Header 2 ("os-integration",[],[]) [Str "OS",Space,Str "Integration"]
,Para [Str "Pass",Space,Str "system",Space,Str "shell",Space,Str "environment",Space,Str "to",Space,Str "Emacs.",Space,Str "This",Space,Str "is",Space,Str "important",Space,Str "primarily",Space,Str "for",Space,Str "shell",Space,Str "inside",Space,Str "Emacs,",Space,Str "but",Space,Str "also",Space,Str "things",Space,Str "like",Space,Str "Org",Space,Str "mode",Space,Str "export",Space,Str "to",Space,Str "Tex",Space,Str "PDF",Space,Str "don't",Space,Str "work,",Space,Str "since",Space,Str "it",Space,Str "relies",Space,Str "on",Space,Str "running",Space,Str "external",Space,Str "command",Space,Code ("",[],[]) "pdflatex",Str ",",Space,Str "which",Space,Str "is",Space,Str "loaded",Space,Str "from",Space,Code ("",[],[]) "PATH",Str "."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package exec-path-from-shell\n  :config\n  (when (memq window-system '(mac ns))\n    (exec-path-from-shell-initialize)))\n"
,Para [Str "Use",Space,Code ("",[],[]) "Cmd+i",Space,Str "to",Space,Str "open",Space,Str "the",Space,Str "current",Space,Str "folder",Space,Str "in",Space,Str "a",Space,Str "new",Space,Str "tab",Space,Str "of",Space,Str "Terminal:"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(defun iterm-goto-filedir-or-home ()\n  \"Go to present working dir and focus iterm\"\n  (interactive)\n  (do-applescript\n   (concat\n    \" tell application \\\"iTerm2\\\"\\n\"\n    \"   tell current window\\n\"\n    \"     create tab with profile \\\"Default\\\"\\n\"\n    \"   end tell\\n\"\n    \"   tell the current session of current window\\n\"\n    (format \"     write text \\\"cd %s\\\" \\n\"\n            ;; string escaping madness for applescript\n            (replace-regexp-in-string \"\\\\\\\\\" \"\\\\\\\\\\\\\\\\\"\n                                      (shell-quote-argument (or default-directory \"~\"))))\n    \"   end tell\\n\"\n    \" end tell\\n\"\n    \" do shell script \\\"open -a iTerm\\\"\\n\"\n    ))\n  )\n(global-set-key (kbd \"s-i\") 'iterm-goto-filedir-or-home)\n"
,Header 2 ("navigation-and-editing",[],[]) [Str "Navigation",Space,Str "and",Space,Str "editing"]
,Para [Str "Kill",Space,Str "line",Space,Str "with",Space,Code ("",[],[]) "Cmd-Backspace",Space,Str "(thanks",Space,Str "to",Space,Str "simpleclip,",Space,Str "killing",Space,Str "doesn't",Space,Str "rewrite",Space,Str "the",Space,Str "system",Space,Str "clipboard).",Space,Str "Kill",Space,Str "one",Space,Str "word",Space,Str "with",Space,Code ("",[],[]) "Alt-Backspace",Str ".",Space,Str "Also",Space,Str "kill",Space,Str "forward",Space,Str "with",Space,Code ("",[],[]) "Alt-Shift-Backspace",Str "."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-set-key (kbd \"s-<backspace>\") 'kill-whole-line)\n(global-set-key (kbd \"s-<delete>\") 'kill-whole-line)\n(global-set-key (kbd \"M-S-<backspace>\") 'kill-word)\n(global-set-key (kbd \"M-<delete>\") 'kill-word)\n(bind-key* \"S-<delete>\" 'kill-word)\n"
,Para [Str "Use",Space,Code ("",[],[]) "cmd",Space,Str "for",Space,Str "movement",Space,Str "and",Space,Str "selection",Space,Str "just",Space,Str "like",Space,Str "in",Space,Str "macOS."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-set-key (kbd \"s-<right>\") 'end-of-visual-line)\n(global-set-key (kbd \"s-<left>\") 'beginning-of-visual-line)\n\n(global-set-key (kbd \"s-<up>\") 'beginning-of-buffer)\n(global-set-key (kbd \"s-<down>\") 'end-of-buffer)\n\n(global-set-key (kbd \"s-l\") 'goto-line)\n"
,Para [Str "macOS",Space,Str "basics."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-set-key (kbd \"s-a\") 'mark-whole-buffer)       ;; select all\n(global-set-key (kbd \"s-s\") 'save-buffer)             ;; save\n(global-set-key (kbd \"s-S\") 'write-file)              ;; save as\n(global-set-key (kbd \"s-q\") 'save-buffers-kill-emacs) ;; quit\n"
,Para [Str "Regular",Space,Str "people",Space,Str "undo-redo."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package undo-fu)\n(global-unset-key (kbd \"C-z\"))\n(global-set-key (kbd \"C-z\")   'undo-fu-only-undo)\n(global-set-key (kbd \"C-S-z\") 'undo-fu-only-redo)\n(global-set-key (kbd \"s-z\")   'undo-fu-only-undo)\n(global-set-key (kbd \"s-r\")   'undo-fu-only-redo)\n"
,Para [Str "Go",Space,Str "back",Space,Str "to",Space,Str "previous",Space,Str "mark",Space,Str "(position)",Space,Str "within",Space,Str "buffer",Space,Str "to",Space,Str "go",Space,Str "back",Space,Str "(forward?)."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(defun my-pop-local-mark-ring ()\n  (interactive)\n  (set-mark-command t))\n\n(defun unpop-to-mark-command ()\n  \"Unpop off mark ring. Does nothing if mark ring is empty.\"\n  (interactive)\n      (when mark-ring\n        (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))\n        (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))\n        (when (null (mark t)) (ding))\n        (setq mark-ring (nbutlast mark-ring))\n        (goto-char (marker-position (car (last mark-ring))))))\n\n(global-set-key (kbd \"C-i\") 'my-pop-local-mark-ring)\n(global-set-key (kbd \"C-o\") 'unpop-to-mark-command)\n"
,Para [Str "Move",Space,Str "between",Space,Str "open",Space,Str "buffers",Space,Str "with",Space,Str "ease."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-set-key (kbd \"s-[\") 'previous-buffer)\n(global-set-key (kbd \"s-]\") 'next-buffer)\n"
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(defun vsplit-last-buffer ()\n  (interactive)\n  (split-window-vertically)\n  (other-window 1 nil)\n  (switch-to-next-buffer))\n\n(defun hsplit-last-buffer ()\n  (interactive)\n  (split-window-horizontally)\n  (other-window 1 nil)\n  (switch-to-next-buffer))\n\n(global-set-key (kbd \"s-w\") (kbd \"C-x 0\")) ;; just like close tab in a web browser\n(global-set-key (kbd \"s-W\") (kbd \"C-x 1\")) ;; close others with shift\n\n(global-set-key (kbd \"s-'\") (kbd \"C-x 2\"))\n(global-set-key (kbd \"s-5\") (kbd \"C-x 3\"))\n\n(global-set-key (kbd \"s-K\") 'kill-this-buffer)\n\n;; (global-set-key (kbd \"s-T\") 'vsplit-last-buffer)\n;; (global-set-key (kbd \"s-t\") 'hsplit-last-buffer)\n"
,Para [Str "Go",Space,Str "to",Space,Str "other",Space,Str "windows",Space,Str "easily",Space,Str "with",Space,Str "one",Space,Str "keystroke",Space,Code ("",[],[]) "s-something",Space,Str "instead",Space,Str "of",Space,Code ("",[],[]) "C-x something",Str ".",SoftBreak,Code ("",[],[]) "Move-text",Space,Str "allows",Space,Str "moving",Space,Str "lines",Space,Str "around",Space,Str "with",Space,Str "meta-up/down."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(eval-after-load \"org\"\n  '(progn (setq org-metaup-hook nil)\n   (setq org-metadown-hook nil)))\n\n(use-package move-text\n  :config\n  (move-text-default-bindings))\n"
,Para [Str "Smarter",Space,Str "open-line:",Space,Str "Hit",Space,Code ("",[],[]) "cmd+return",Space,Str "to",Space,Str "insert",Space,Str "a",Space,Str "new",Space,Str "line",Space,Str "below",Space,Str "the",Space,Str "current."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(defun smart-open-line ()\n  \"Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode.\"\n  (interactive)\n  (move-end-of-line nil)\n  (newline-and-indent))\n\n(defun smart-open-line-above ()\n  \"Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode.\"\n  (interactive)\n  (move-beginning-of-line nil)\n  (newline-and-indent)\n  (forward-line -1)\n  (indent-according-to-mode))\n\n(global-set-key (kbd \"s-<return>\") 'smart-open-line)\n(global-set-key (kbd \"s-S-<return>\") 'smart-open-line-above)\n"
,Para [Str "Join",Space,Str "lines."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(defun smart-join-line (beg end)\n  \"If in a region, join all the lines in it. If not, join the current line with the next line.\"\n  (interactive \"r\")\n  (if mark-active\n      (join-region beg end)\n      (top-join-line)))\n\n(defun top-join-line ()\n  \"Join the current line with the next line.\"\n  (interactive)\n  (delete-indentation 1))\n\n(defun join-region (beg end)\n  \"Join all the lines in the region.\"\n  (interactive \"r\")\n  (if mark-active\n      (let ((beg (region-beginning))\n            (end (copy-marker (region-end))))\n        (goto-char beg)\n        (while (< (point) end)\n          (join-line 1)))))\n\n(global-set-key (kbd \"s-j\") 'smart-join-line)\n"
,Para [Str "Delete",Space,Str "trailing",Space,Str "spaces",Space,Str "and",Space,Str "add",Space,Str "new",Space,Str "line",Space,Str "in",Space,Str "the",Space,Str "end",Space,Str "of",Space,Str "a",Space,Str "file",Space,Str "on",Space,Str "save."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(add-hook 'before-save-hook 'delete-trailing-whitespace)\n(setq require-final-newline t)\n"
,Para [Str "Allow",Space,Str "shift",Space,Str "selecting",Space,Str "in",Space,Str "org",Space,Str "mode",Space,Str "(I",Space,Str "don't",Space,Str "care",Space,Str "about",Space,Str "priority",Space,Str "indicators)."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n"
,Para [Str "Multiple",Space,Str "cursors",Space,Str "are",Space,Str "a",Space,Str "must.",Space,Str "Make",Space,Code ("",[],[]) "<return>",Space,Str "insert",Space,Str "a",Space,Str "newline;",Space,Code ("",[],[]) "multiple-cursors-mode",Space,Str "can",Space,Str "still",Space,Str "be",Space,Str "disabled",Space,Str "with",Space,Code ("",[],[]) "C-g",Str "."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package multiple-cursors\n  :config\n  (setq mc/always-run-for-all 1)\n  ;; (global-set-key (kbd \"s-d\") 'mc/mark-next-like-this)\n  ;; (global-set-key (kbd \"C-s-g\") 'mc/mark-all-dwim)\n  (define-key mc/keymap (kbd \"<return>\") nil)\n  (global-set-key (kbd \"s-<mouse-1>\") 'mc/add-cursor-on-click))\n"
,Para [Str "Comment",Space,Str "lines."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-set-key (kbd \"s-/\") 'comment-line)\n"
,Para [Str "ESC",Space,Str "as",Space,Str "the",Space,Str "universal",Space,Str "\"get",Space,Str "me",Space,Str "out",Space,Str "of",Space,Str "here\"",Space,Str "command."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(define-key key-translation-map (kbd \"ESC\") (kbd \"C-g\"))\n"
,Header 2 ("windows",[],[]) [Str "Windows"]
,Para [Str "Automatic",Space,Str "new",Space,Str "windows",Space,Str "are",Space,Str "always",Space,Str "on",Space,Str "the",Space,Str "bottom,",Space,Str "not",Space,Str "the",Space,Str "side."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq split-height-threshold 0)\n(setq split-width-threshold nil)\n"
,Para [Str "Move",Space,Str "between",Space,Str "windows",Space,Str "with",Space,Str "alt-tab"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-set-key (kbd \"M-<tab>\") (kbd \"C-x o\"))\n"
,Para [Str "Shackle",Space,Str "to",Space,Str "make",Space,Str "sure",Space,Str "all",Space,Str "windows",Space,Str "are",Space,Str "nicely",Space,Str "positioned."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package shackle\n  :init\n  (setq shackle-default-alignment 'below\n        shackle-default-size 0.4\n        shackle-rules '((help-mode           :align below :select t)\n                        (helpful-mode        :align below)\n                        (compilation-mode    :select t   :size 0.25)\n                        (\"*compilation*\"     :select nil :size 0.25)\n                        (\"*ag search*\"       :select nil :size 0.25)\n                        (\"*Flycheck errors*\" :select nil :size 0.25)\n                        (\"*Warnings*\"        :select nil :size 0.25)\n                        (\"*Error*\"           :select nil :size 0.25)\n                        (\"*Org Links*\"       :select nil :size 0.1)\n                        (magit-status-mode                :align bottom :size 0.5  :inhibit-window-quit t)\n                        (magit-log-mode                   :same t                  :inhibit-window-quit t)\n                        (magit-commit-mode                :ignore t)\n                        (magit-diff-mode     :select nil  :align left   :size 0.5)\n                        (git-commit-mode                  :same t)\n                        (vc-annotate-mode                 :same t)\n                        ))\n  :config\n  (shackle-mode 1))\n"
,Header 2 ("edit-indirect",[],[]) [Str "Edit",Space,Str "indirect"]
,Para [Str "Select",Space,Str "any",Space,Str "region",Space,Str "and",Space,Str "edit",Space,Str "it",Space,Str "in",Space,Str "another",Space,Str "buffer."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package edit-indirect)\n"
,Header 2 ("ivy-swiper-and-counsel",[],[]) [Str "Ivy,",Space,Str "Swiper",Space,Str "and",Space,Str "Counsel"]
,Para [Str "Swiper"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package swiper\n  :config\n  (global-set-key (kbd \"s-f\") 'swiper-isearch))\n"
,Para [Str "Ivy"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(use-package ivy\n  :config\n  (ivy-mode 1)\n  (setq ivy-use-virtual-buffers t)\n  (setq ivy-count-format \"(%d/%d) \")\n  (setq enable-recursive-minibuffers t)\n  (setq ivy-initial-inputs-alist nil)\n  (setq ivy-re-builders-alist\n      '((swiper . ivy--regex-plus)\n        (swiper-isearch . regexp-quote)\n        ;; (counsel-git . ivy--regex-plus)\n        ;; (counsel-ag . ivy--regex-plus)\n        (counsel-rg . ivy--regex-plus)\n        (t      . ivy--regex-fuzzy)))   ;; enable fuzzy searching everywhere except for Swiper and ag\n\n  (global-set-key (kbd \"s-b\") 'ivy-switch-buffer))\n\n\n(use-package ivy-rich\n  :config\n  (ivy-rich-mode 1)\n  (setq ivy-rich-path-style 'abbrev))\n"
,Para [Str "Counsel"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(use-package counsel\n  :config\n  (global-set-key (kbd \"M-x\") 'counsel-M-x)\n  (global-set-key (kbd \"s-y\") 'counsel-yank-pop)\n  (global-set-key (kbd \"C-x C-f\") 'counsel-find-file)\n  (global-set-key (kbd \"s-F\") 'counsel-rg)\n  (global-set-key (kbd \"s-p\") 'counsel-git))\n\n;; When using git ls (via counsel-git), include unstaged files\n(setq counsel-git-cmd \"git ls-files -z --full-name --exclude-standard --others --cached --\")\n\n(use-package smex)\n(use-package flx)\n"
,Header 1 ("git",[],[]) [Str "Git"]
,Para [Str "Magit",Space,Str "time"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(use-package magit\n  :config\n  (global-set-key (kbd \"s-g\") 'magit-status))\n(use-package magit-todos)\n\n(use-package hl-todo\n  :config\n  (setq hl-todo-keyword-faces\n      '((\"TODO\"   . \"#FF0000\")\n        (\"FIXME\"  . \"#FF0000\")\n        (\"DEBUG\"  . \"#A020F0\")\n        (\"GOTCHA\" . \"#FF4500\")\n        (\"STUB\"   . \"#1E90FF\"))))\n"
,Para [Str "Navigate",Space,Str "to",Space,Str "projects",Space,Str "with",Space,Code ("",[],[]) "Cmd+Shift+P"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(setq magit-repository-directories '((\"\\~/Projects/\" . 4)))\n\n(defun magit-status-with-prefix-arg ()\n  \"Call `magit-status` with a prefix.\"\n  (interactive)\n  (let ((current-prefix-arg '(4)))\n    (call-interactively #'magit-status)))\n\n(global-set-key (kbd \"s-P\") 'magit-status-with-prefix-arg)\n"
,Header 1 ("spell-checking",[],[]) [Str "Spell",Space,Str "checking"]
,Para [Str "Spell",Space,Str "checking",Space,Str "requires",Space,Str "an",Space,Str "external",Space,Str "command",Space,Str "to",Space,Str "be",Space,Str "available.",Space,Str "Install",Space,Str "aspell",Space,Str "on",Space,Str "your",Space,Str "Mac,",Space,Str "then",Space,Str "make",Space,Str "it",Space,Str "the",Space,Str "default",Space,Str "checker",Space,Str "for",Space,Str "Emacs\8217",Space,Str "ispell.",Space,Str "Note",Space,Str "that",Space,Str "personal",Space,Str "dictionary",Space,Str "is",Space,Str "located",Space,Str "at",Space,Str "~/.aspell.LANG.pws",Space,Str "by",Space,Str "default."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(setq ispell-program-name \"aspell\")\n"
,Para [Str "Enable",Space,Str "spellcehck",Space,Str "for",Space,Str "all",Space,Str "text",Space,Str "modes.",Space,Str "TODO:",Space,Str "disable",Space,Str "on",Space,Str "start."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(add-hook 'text-mode-hook 'flyspell-mode)\n(global-set-key (kbd \"s-\\\\\") 'ispell-word)\n"
,Header 1 ("thesaurus",[],[]) [Str "Thesaurus"]
,Para [Str "Synonym",Space,Str "search",Space,Str "is",Space,Code ("",[],[]) "Cmd+Shift+\\",Str ".",Space,Str "It",Space,Str "requires",Space,Code ("",[],[]) "wordnet",Str "."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package powerthesaurus\n  :config\n  (global-set-key (kbd \"s-|\") 'powerthesaurus-lookup-word-dwim)\n  )\n"
,Para [Str "Word",Space,Str "definition",Space,Str "search."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(use-package define-word\n  :config\n  (global-set-key (kbd \"M-\\\\\") 'define-word-at-point))\n"
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n;; (read-abbrev-file abbrev-file-name t)\n;; (setq-default abbrev-mode t)\n"
,Header 1 ("yasnippet",[],[]) [Str "YASnippet"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(use-package yasnippet\n  :config\n  (setq yas-snippet-dirs\n        '(\"~/.emacs.d/snippets\"))\n  (yas-global-mode 1))\n"
,Header 1 ("markdown",[],[]) [Str "Markdown"]
,Para [Str "Let's",Space,Str "see",Space,Str "what",Space,Str "this",Space,Str "does\8230"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(use-package markdown-mode\n  :mode ((\"README\\\\.md\\\\'\" . gfm-mode)\n         (\"\\\\.md\\\\'\" . markdown-mode)\n         (\"\\\\.markdown\\\\'\" . markdown-mode))\n  :init (setq markdown-command \"pandoc --no-highlight\"))\n\n(eval-after-load 'markdown-mode\n  `(define-key markdown-mode-map (kbd \"C-s-<down>\") 'markdown-narrow-to-subtree))\n\n(eval-after-load 'markdown-mode\n  `(define-key markdown-mode-map (kbd \"C-s-<up>\") 'widen))\n\n(eval-after-load 'markdown-mode\n  `(define-key markdown-mode-map (kbd \"s-O\") (lambda ()\n                                               (interactive)\n                                               (markdown-kill-ring-save)\n                                               (let ((oldbuf (current-buffer)))\n                                                 (save-current-buffer\n                                                   (set-buffer \"*markdown-output*\")\n                                                   (with-no-warnings (mark-whole-buffer))\n                                                   (simpleclip-copy (point-min) (point-max)))))))\n\n;; Export without the first line (usually there's a header)\n(eval-after-load 'markdown-mode\n  `(define-key markdown-mode-map (kbd \"M-s-O\") (lambda ()\n                                               (interactive)\n                                               (markdown-kill-ring-save)\n                                               (let ((oldbuf (current-buffer)))\n                                                 (save-current-buffer\n                                                   (set-buffer \"*markdown-output*\")\n                                                   (goto-char (point-min))\n                                                   (kill-whole-line)\n                                                   (with-no-warnings (mark-whole-buffer))\n                                                   (simpleclip-copy (point-min) (point-max)))))))\n"
,Header 1 ("programming",[],[]) [Str "Programming"]
,Header 2 ("formatting",[],[]) [Str "Formatting"]
,Para [Str "Format",Space,Str "everything"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package format-all)\n"
,Header 1 ("frames-windows-buffers",[],[]) [Str "Frames,",Space,Str "windows,",Space,Str "buffers"]
,Para [Str "Always",Space,Str "open",Space,Str "in",Space,Str "the",Space,Str "same",Space,Str "frame"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq ns-pop-up-frames nil)\n"
,Header 1 ("org",[],[]) [Str "Org"]
,Para [Str "Visually",Space,Str "indent",Space,Str "sections,",Space,Str "which",Space,Str "looks",Space,Str "better",Space,Str "for",Space,Str "smaller",Space,Str "files",Space,Str "etc."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq org-startup-indented t)\n(setq org-catch-invisible-edits 'error)\n(setq org-cycle-separator-lines -1)\n(setq calendar-week-start-day 1)\n(setq org-ellipsis \"\10549\")\n(setq org-support-shift-select t)\n"
,Para [Str "org",Space,Str "files"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(setq org-directory \"~/org\")\n(setq org-agenda-files '(\"~/org\"))\n\n(setq org-refile-targets (quote ((nil :maxlevel . 9)\n                                 (org-agenda-files :maxlevel . 9))))\n"
,Para [Str "Code",Space,Str "block",Space,Str "indentation",Space,Str "should",Space,Str "be",Space,Str "correct",Space,Str "depending",Space,Str "on",Space,Str "language,",Space,Str "including",Space,Str "code",Space,Str "highlighting."]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(setq org-src-tab-acts-natively t)\n(setq org-src-preserve-indentation t)\n(setq org-src-fontify-natively t)\n"
,Para [Str "Export",Space,Str "to",Space,Str "HTML"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(use-package htmlize)\n"
,Para [Str "Etc",Space,Str "from",Space,Link ("",[],[]) [Str "https://github.com/freetonik/emacs-dotfiles/blob/master/init.org"] ("https://github.com/freetonik/emacs-dotfiles/blob/master/init.org","")]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(with-eval-after-load 'org\n  ;; no shift or alt with arrows\n  (define-key org-mode-map (kbd \"<S-left>\") nil)\n  (define-key org-mode-map (kbd \"<S-right>\") nil)\n  (define-key org-mode-map (kbd \"<M-left>\") nil)\n  (define-key org-mode-map (kbd \"<M-right>\") nil)\n  ;; no shift-alt with arrows\n  (define-key org-mode-map (kbd \"<M-S-left>\") nil)\n  (define-key org-mode-map (kbd \"<M-S-right>\") nil)\n\n  (define-key org-mode-map (kbd \"C-s-<left>\") 'org-metaleft)\n  (define-key org-mode-map (kbd \"C-s-<right>\") 'org-metaright))\n\n(setq org-use-speed-commands t)\n\n(with-eval-after-load 'org\n  (define-key org-mode-map (kbd \"C-s-<down>\") 'org-narrow-to-subtree)\n  (define-key org-mode-map (kbd \"C-s-<up>\") 'widen))\n"
,Para [Str "Agenda",Space,Str "and",Space,Str "capture"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "(global-set-key (kbd \"C-c c\") 'org-capture)\n(global-set-key (kbd \"s-=\") 'org-capture)\n(global-set-key \"\\C-ca\" 'org-agenda)\n"
,Header 2 ("latex",[],[]) [Str "Latex"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(require 'ox-latex)\n(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))\n(setq org-highlight-latex-and-related '(latex))\n(with-eval-after-load 'ox-latex\n  (add-to-list\n   'org-latex-classes\n   '(\"tufte-book\"\n\n     \"\\\\documentclass{tufte-book}\n     \\\\input{/users/rakhim/.emacs.d/latex/tufte.tex}\"\n     (\"\\\\part{%s}\" . \"\\\\part*{%s}\")\n     (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\")\n     (\"\\\\section{%s}\" . \"\\\\section*{%s}\")\n     (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")\n     (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\"))))\n"
,Header 2 ("pandoc",[],[]) [Str "Pandoc"]
,CodeBlock ("",["commonlisp"],[("org-language","emacs-lisp")]) "\n(use-package ox-pandoc)\n"]
